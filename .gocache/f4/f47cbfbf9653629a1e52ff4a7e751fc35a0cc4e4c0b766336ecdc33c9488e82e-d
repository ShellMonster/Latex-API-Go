// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/daozhang/Downloads/Latex公式渲染项目/Go服务端/internal/renderer/ffi.go:1:1
//go:build cgo

package renderer

/*
#cgo darwin LDFLAGS: -L${SRCDIR}/../../../Rust渲染 -lformula -Wl,-rpath,${SRCDIR}/../../../Rust渲染
#cgo linux  LDFLAGS: -L${SRCDIR}/../../../Rust渲染 -lformula -Wl,-rpath,${SRCDIR}/../../../Rust渲染
#include <stdlib.h>

char* render_svg(const char* formula);
void  free_svg(char* ptr);
*/
import _ "unsafe"

import (
	"errors"
	"unsafe"
)

// ErrFFINilResult 表示 Rust FFI 返回了空指针
var ErrFFINilResult = errors.New("Rust 渲染返回空指针")

// ErrFFIMallocFailed 表示 C 字符串分配失败
var ErrFFIMallocFailed = errors.New("无法为公式分配 C 字符串")

type ffiRenderer struct{}

// NewFFIRenderer 创建基于 Rust 共享库的渲染器
func NewFFIRenderer() (Renderer, error) {
	return &ffiRenderer{}, nil
}

// Render 调用 Rust 的 render_svg 生成真实 SVG
func (r *ffiRenderer) Render(tex string) (string, error) {
	cstr := ( /*line :35:10*/_Cfunc_CString /*line :35:18*/)(tex)
	if cstr == nil {
		return "", ErrFFIMallocFailed
	}
	defer func() func() { _cgo0 := /*line :39:15*/unsafe.Pointer(cstr); return func() { _cgoCheckPointer(_cgo0, nil); /*line :39:36*/_Cfunc_free(_cgo0); }}()()

	out := ( /*line :41:9*/_Cfunc_render_svg /*line :41:20*/)(cstr)
	if out == nil {
		return "", ErrFFINilResult
	}
	defer ( /*line :45:8*/_Cfunc_free_svg /*line :45:17*/)(out)

	return ( /*line :47:9*/_Cfunc_GoString /*line :47:18*/)(out), nil
}
